
Directory Structure

my_project/
│   ├── static/
│   │   ├── css/
│   │   │   └── styles.css
│   ├── templates/
│   │   ├── index.html
│   ├── app.py
│   ├── carsimage.py
app.py

from flask import Flask, render_template, request, redirect, url_for
from werkzeug.utils import secure_filename
import os
import carsimage

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads/'

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            return redirect(request.url)

        file = request.files['file']
        if file.filename == '':
            return redirect(request.url)

        if file:
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            car_brand, car_model = carsimage.predict(file_path)

            return render_template('index.html', car_brand=car_brand, car_model=car_model)

    return render_template('index.html')

if __name__ == '__main__':
    app.run()
carsimage.py

In this file, you should load your ML model, preprocess the input image, and implement the predict function.

import torch
from torchvision import transforms

def load_model():
    model = ...
    # Load your pretrained model here
    return model

def preprocess(image_path):
    input_transforms = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    image = ...
    # Load your image, apply the transforms, and add the batch dimension
    return image

def predict(image_path):
    model = load_model()
    image = preprocess(image_path)
    predictions = model(image)

    # Extract the brand and model from the predictions

    return car_brand, car_model

templates/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car Brand & Model Recognition</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <h1>Car Brand & Model Recognition</h1>
    <form action="/" method="POST" enctype="multipart/form-data">
        <input type="file" name="file" accept="image/*" required>
        <input type="submit" value="Recognize">
    </form>
    {% if car_brand and car_model %}
    <h2>Car Brand: {{ car_brand }}</h2>
    <h2>Car Model: {{ car_model }}</h2>
    {% endif %}
</body>
</html>
static/css/styles.css

body {
    font-family: Arial, sans-serif;
    text-align: center;
    background-color: #f8f9fa;
}

h1 {
    color: #343a40;
}

form {
    margin: 2rem 0;
}

input[type="file"] {
    margin: 1rem 0;
}

input[type="submit"] {
    background-color: #007bff;
    color: #fff;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

input[type="submit"]:hover {
    background-color: #0056b3;
}
This code structure will allow you to create a basic website that lets users submit images and receive the car brand and model as a result. You'll need to replace the placeholders in the carsimage.py file with your actual model and image preprocessing code. Once you've done that, you can run the app.py file to start the Flask server and test the website locally.